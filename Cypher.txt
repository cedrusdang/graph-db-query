// To load, copy all csv to the default import folder for NEO4J, which can be access using the GUI
// By:Database menu (near the open btn) -> Open folder -> Import

// NODES

LOAD CSV WITH HEADERS FROM 'file:///date.csv' AS row
MERGE (:date {
  year: row.year, 
  month: row.month, 
  dayweek: row.dayweek, 
  day_of_week: row.day_of_week, 
  date_sk: row.date_sk
});

LOAD CSV WITH HEADERS FROM 'file:///crash_type.csv' AS row
MERGE (:crash_type {
  crash_type: row.crash_type, 
  crash_type_sk: row.crash_type_sk
});

LOAD CSV WITH HEADERS FROM 'file:///holiday.csv' AS row
MERGE (:holiday {
  easter: row.easter, 
  christmas: row.christmas, 
  holiday_sk: row.holiday_sk
});

LOAD CSV WITH HEADERS FROM 'file:///sa4.csv' AS row
MERGE (:sa4 {
  sa4: row.sa4, 
  sa4_sk: row.sa4_sk
});

LOAD CSV WITH HEADERS FROM 'file:///nra.csv' AS row
MERGE (:nra {
  nra: row.nra, 
  nra_sk: row.nra_sk
});

LOAD CSV WITH HEADERS FROM 'file:///state.csv' AS row
MERGE (:state {
  state: row.state, 
  state_sk: row.state_sk
});

LOAD CSV WITH HEADERS FROM 'file:///gender.csv' AS row
MERGE (:gender {
  gender: row.gender, 
  gender_sk: row.gender_sk
});

LOAD CSV WITH HEADERS FROM 'file:///age_group.csv' AS row
MERGE (:age_group {
  age_group: row.age_group, 
  age_group_sk: row.age_group_sk
});

LOAD CSV WITH HEADERS FROM 'file:///road_user.csv' AS row
MERGE (:road_user {
  road_user: row.road_user, 
  road_user_sk: row.road_user_sk
});

LOAD CSV WITH HEADERS FROM 'file:///involvement.csv' AS row
MERGE (:involvement {
  bus: row.bus, 
  heavy_rigid_truck: row.heavy_rigid_truck, 
  articulated_truck: row.articulated_truck, 
  involvement_sk: row.involvement_sk
});

LOAD CSV WITH HEADERS FROM 'file:///road_type.csv' AS row
MERGE (:road_type {
  road_type: row.road_type, 
  road_type_sk: row.road_type_sk
});

LOAD CSV WITH HEADERS FROM 'file:///speed_limit.csv' AS row
MERGE (:speed_limit {
  speed_limit: row.speed_limit, 
  speed_limit_sk: row.speed_limit_sk
});

LOAD CSV WITH HEADERS FROM 'file:///time.csv' AS row
MERGE (:time {
  hour: row.hour, 
  time_of_day: row.time_of_day, 
  time_sk: row.time_sk
});

// NOTE: LGA contains only lga and lga_sk
LOAD CSV WITH HEADERS FROM 'file:///lga.csv' AS row
MERGE (:lga {
  lga: row.lga, 
  lga_sk: row.lga_sk
});

LOAD CSV WITH HEADERS FROM 'file:///crash.csv' AS row
MERGE (:crash {
  crash_id: row.crash_id, 
  fatalities: row.fatalities, 
  crash_sk: row.crash_sk
});

LOAD CSV WITH HEADERS FROM 'file:///fatality.csv' AS row
MERGE (:fatality {
  fatality_sk: row.fatality_sk, 
  age: row.age
});

// LOCATION RELATIONSHIPS

LOAD CSV WITH HEADERS FROM 'file:///HAS_LGA.csv' AS row
MATCH (a:state {state_sk: row.src_value})
MATCH (b:lga {lga_sk: row.dst_value})
MERGE (a)-[:HAS_LGA]->(b);

LOAD CSV WITH HEADERS FROM 'file:///IN_SA4.csv' AS row
MATCH (a:lga {lga_sk: row.src_value})
MATCH (b:sa4 {sa4_sk: row.dst_value})
MERGE (a)-[:IN_SA4]->(b);

LOAD CSV WITH HEADERS FROM 'file:///IN_STATE.csv' AS row
MATCH (a:sa4 {sa4_sk: row.src_value})
MATCH (b:state {state_sk: row.dst_value})
MERGE (a)-[:IN_STATE]->(b);

LOAD CSV WITH HEADERS FROM 'file:///IN_NRA.csv' AS row
MATCH (a:lga {lga_sk: row.src_value})
MATCH (b:nra {nra_sk: row.dst_value})
MERGE (a)-[:IN_NRA]->(b);

// CRASH FACT & DIMENSION RELATIONSHIPS

LOAD CSV WITH HEADERS FROM 'file:///IN_LGA.csv' AS row
MATCH (a:crash {crash_sk: row.src_value})
MATCH (b:lga {lga_sk: row.dst_value})
MERGE (a)-[:IN_LGA]->(b);

LOAD CSV WITH HEADERS FROM 'file:///IN_DATE.csv' AS row
MATCH (a:crash {crash_sk: row.src_value})
MATCH (b:date {date_sk: row.dst_value})
MERGE (a)-[:IN_DATE]->(b);

LOAD CSV WITH HEADERS FROM 'file:///CRASH_TYPE_IS.csv' AS row
MATCH (a:crash {crash_sk: row.src_value})
MATCH (b:crash_type {crash_type_sk: row.dst_value})
MERGE (a)-[:CRASH_TYPE_IS]->(b);

LOAD CSV WITH HEADERS FROM 'file:///IN_EVENT.csv' AS row
MATCH (a:crash {crash_sk: row.src_value})
MATCH (b:holiday {holiday_sk: row.dst_value})
MERGE (a)-[:IN_EVENT]->(b);

LOAD CSV WITH HEADERS FROM 'file:///IN_ROAD_TYPE.csv' AS row
MATCH (a:crash {crash_sk: row.src_value})
MATCH (b:road_type {road_type_sk: row.dst_value})
MERGE (a)-[:IN_ROAD_TYPE]->(b);

LOAD CSV WITH HEADERS FROM 'file:///IN_SPEED_LIMIT.csv' AS row
MATCH (a:crash {crash_sk: row.src_value})
MATCH (b:speed_limit {speed_limit_sk: row.dst_value})
MERGE (a)-[:IN_SPEED_LIMIT]->(b);

LOAD CSV WITH HEADERS FROM 'file:///INVOLVEMENT_IS.csv' AS row
MATCH (a:crash {crash_sk: row.src_value})
MATCH (b:involvement {involvement_sk: row.dst_value})
MERGE (a)-[:INVOLVEMENT_IS]->(b);

LOAD CSV WITH HEADERS FROM 'file:///IN_TIME.csv' AS row
MATCH (a:crash {crash_sk: row.src_value})
MATCH (b:time {time_sk: row.dst_value})
MERGE (a)-[:IN_TIME]->(b);

// FATALITY FACT & DIMENSION RELATIONSHIPS

LOAD CSV WITH HEADERS FROM 'file:///IN_CRASH.csv' AS row
MATCH (a:fatality {fatality_sk: row.src_value})
MATCH (b:crash {crash_sk: row.dst_value})
MERGE (a)-[:IN_CRASH]->(b);

LOAD CSV WITH HEADERS FROM 'file:///AGE_IS.csv' AS row
MATCH (a:fatality {fatality_sk: row.src_value})
MATCH (b:age_group {age_group_sk: row.dst_value})
MERGE (a)-[:AGE_IS]->(b);

LOAD CSV WITH HEADERS FROM 'file:///GENDER_IS.csv' AS row
MATCH (a:fatality {fatality_sk: row.src_value})
MATCH (b:gender {gender_sk: row.dst_value})
MERGE (a)-[:GENDER_IS]->(b);

LOAD CSV WITH HEADERS FROM 'file:///ROAD_USER_IS.csv' AS row
MATCH (a:fatality {fatality_sk: row.src_value})
MATCH (b:road_user {road_user_sk: row.dst_value})
MERGE (a)-[:ROAD_USER_IS]->(b);


############################################
# STOP THE COPY FOR THE LOADING RIGHT HERE #
############################################

// Queries for questions

// Question 1: 
// Find all crashes in WA from 2020-2024 where articulated trucks were involved and multiple fatalities (Number Fatalities>1) occurred. 
// For each crash, provide the road user, age of each road user, gender of each road user, LGA Name, month and year of the crash, and the total number of fatalities.

MATCH (c:crash)-[:IN_LGA]->(lga:lga)
      -[:IN_SA4]->(:sa4)-[:IN_STATE]->(s:state),
      (c)-[:IN_DATE]->(d:date),
      (c)-[:INVOLVEMENT_IS]->(inv:involvement)
WHERE toInteger(d.year) >= 2020 AND toInteger(d.year) <= 2024
  AND toLower(s.state) = "wa"
  AND toLower(inv.articulated_truck) = "yes"
  AND toInteger(c.fatalities) > 1
WITH c, lga, d
MATCH (f:fatality)-[:IN_CRASH]->(c)
MATCH (f)-[:GENDER_IS]->(g:gender)
MATCH (f)-[:ROAD_USER_IS]->(ru:road_user)
RETURN
  c.crash_id AS crash_id,
  ru.road_user AS road_user,
  f.age AS age,
  g.gender AS gender,
  lga.lga AS lga_name,
  d.month AS month,
  d.year AS year,
  c.fatalities AS total_fatalities
ORDER BY d.year, d.month, c.crash_id, f.fatality_sk;


// Question 2: 
// Find the maximum and minimum age for female and male motorcycle riders who were involved in fatal crashes during the Christmas Period or Easter Period in inner regional Australia. 
// Output the following information: gender, maximum age and minimum age.

MATCH (f:fatality)-[:GENDER_IS]->(g:gender)
MATCH (f)-[:ROAD_USER_IS]->(ru:road_user)
MATCH (f)-[:IN_CRASH]->(c:crash)-[:IN_EVENT]->(h:holiday)
MATCH (c)-[:IN_LGA]->(lga:lga)-[:IN_NRA]->(nra:nra)
WHERE (toLower(h.christmas) = "yes" OR toLower(h.easter) = "yes")
  AND toLower(nra.nra) = "inner regional australia"
  AND toLower(ru.road_user) = "motorcycle rider"
  AND toLower(g.gender) IN ["male", "female"]
RETURN
  g.gender AS gender,
  max(toInteger(f.age)) AS max_age,
  min(toInteger(f.age)) AS min_age
ORDER BY gender;


// Question 3: 
// How many young drivers (Age Group = '17_to_25') were involved in fatal crashes on weekends vs. weekdays in each state during 2024? 
// Output 4 columns: State name, weekends, weekdays, and the average age for all young drivers (Age Group = '17_to_25') who were involved in fatal crashes in each State.

MATCH (f:fatality)-[:AGE_IS]->(ag:age_group)
MATCH (f)-[:IN_CRASH]->(c:crash)-[:IN_DATE]->(d:date)
MATCH (c)-[:IN_LGA]->(lga:lga)-[:IN_SA4]->(:sa4)-[:IN_STATE]->(s:state)
WHERE toLower(ag.age_group) = '17_to_25' AND toInteger(d.year) = 2024
WITH s.state AS state, toLower(d.day_of_week) AS day_of_week, f.age AS age
WITH state,
     sum(CASE WHEN day_of_week = 'weekend' THEN 1 ELSE 0 END) AS weekends,
     sum(CASE WHEN day_of_week = 'weekday' THEN 1 ELSE 0 END) AS weekdays,
     collect(age) AS ages
RETURN state, weekends, weekdays,
       CASE WHEN size(ages) > 0 THEN round(reduce(acc=0.0, a IN ages | acc + toFloat(a))/size(ages),2) ELSE null END AS avg_age
ORDER BY state;


// Question 4: 
// Identify all crashes in WA that occurred Friday (but categorised as a weekend) and resulted in multiple deaths, with victims being both male and female. 
// For each crash, output the SA4 name, national remoteness areas, and national road type.

MATCH (c:crash)-[:IN_LGA]->(lga:lga)-[:IN_SA4]->(sa4:sa4)-[:IN_STATE]->(state:state)
MATCH (c)-[:IN_DATE]->(d:date)
MATCH (c)-[:IN_ROAD_TYPE]->(rt:road_type)
MATCH (lga)-[:IN_NRA]->(nra:nra)
WHERE toLower(state.state) = "wa"
  AND toLower(d.day_of_week) = "weekend"
  AND toLower(d.dayweek) = "friday"
  AND toInteger(c.fatalities) > 1
WITH c, sa4, nra, rt
MATCH (f1:fatality)-[:IN_CRASH]->(c)
MATCH (f1)-[:GENDER_IS]->(g1:gender)
WITH c, sa4, nra, rt, collect(DISTINCT toLower(g1.gender)) AS genders
WHERE "male" IN genders AND "female" IN genders
RETURN DISTINCT sa4.sa4 AS sa4_name,
                nra.nra AS national_remoteness_areas,
                rt.road_type AS national_road_type,
                c.crash_id AS crash_id
ORDER BY sa4_name;


// Question 5: 
// Find the top 5 SA4 regions where the highest number of fatal crashes occur during peak hours (Time between 07:00-09:00 and 16:00-18:00). 
// For each SA4 region, output the name of the region and the separate number of crashes that occurred during morning peak hours and afternoon peak hours (Renamed Morning Peak and Afternoon Peak).

MATCH (c:crash)-[:IN_LGA]->(lga:lga)-[:IN_SA4]->(sa4:sa4)
MATCH (c)-[:IN_TIME]->(t:time)
WITH sa4.sa4 AS sa4_name,
     CASE WHEN toInteger(t.hour) >= 7 AND toInteger(t.hour) < 9 THEN 1 ELSE 0 END AS is_morning_peak,
     CASE WHEN toInteger(t.hour) >= 16 AND toInteger(t.hour) < 18 THEN 1 ELSE 0 END AS is_afternoon_peak
RETURN sa4_name,
       sum(is_morning_peak) AS Morning_Peak,
       sum(is_afternoon_peak) AS Afternoon_Peak
ORDER BY (Morning_Peak + Afternoon_Peak) DESC
LIMIT 5;


// Question 6: 
// Find paths with a length of 3 between any two LGAs. 
// Return the top 3 paths, including the starting LGA and ending LGA for each path. Order results alphabetically by starting LGA and then ending LGA.

MATCH p = (lga1:lga)-[*3]-(lga2:lga)
WHERE lga1 <> lga2
WITH lga1.lga AS start_lga, lga2.lga AS end_lga, p
ORDER BY start_lga, end_lga
RETURN start_lga, end_lga, p
LIMIT 3;


// Question 7 (CITS5504 ONLY): 
// Find all weekday fatal crashes involving pedestrians where either buses or heavy rigid trucks were present in speed zones less than 40 or greater than/equal to 100. 
// Group these crashes by unique combinations of time of day, age group, vehicle type (bus or heavy rigid truck), and speed limitation. 
// For each group, count the number of crashes that occurred. Output a table showing time of day, age group, vehicle type, crash count, and speed limitation, sorted first by time of day (ascending) and then by age group (ascending).

MATCH (c:crash)-[:IN_TIME]->(t:time)
MATCH (c)-[:IN_SPEED_LIMIT]->(sl:speed_limit)
MATCH (c)-[:INVOLVEMENT_IS]->(inv:involvement)
MATCH (f:fatality)-[:IN_CRASH]->(c)
MATCH (f)-[:AGE_IS]->(ag:age_group)
MATCH (f)-[:ROAD_USER_IS]->(ru:road_user)
MATCH (c)-[:IN_DATE]->(d:date)
WHERE toLower(d.day_of_week) = 'weekday'
  AND toLower(ru.road_user) = 'pedestrian'
  AND (
    toLower(inv.bus) = 'yes'
    OR toLower(inv.heavy_rigid_truck) = 'yes'
  )
  AND (
    toInteger(sl.speed_limit) < 40
    OR toInteger(sl.speed_limit) >= 100
  )
WITH
  t.time_of_day AS time_of_day,
  ag.age_group AS age_group,
  CASE
    WHEN toLower(inv.bus) = 'yes' THEN 'bus'
    WHEN toLower(inv.heavy_rigid_truck) = 'yes' THEN 'heavy rigid truck'
    ELSE 'other'
  END AS vehicle_type,
  sl.speed_limit AS speed_limit,
  count(DISTINCT c.crash_id) AS crash_count
RETURN
  time_of_day, age_group, vehicle_type, crash_count, speed_limit
ORDER BY time_of_day ASC, age_group ASC;

// Question 8. For each state, in 2023, find the number of fatal crashes 
// by crash type and the average speed limit.

MATCH (c:crash)-[:IN_DATE]->(d:date)
WHERE toInteger(d.year) = 2023
MATCH (c)-[:CRASH_TYPE_IS]->(ct:crash_type)
MATCH (c)-[:IN_LGA]->(lga:lga)
MATCH (lga)<-[:HAS_LGA]-(state:state)
MATCH (c)-[:IN_SPEED_LIMIT]->(sl:speed_limit)
RETURN
    state.state AS state,
    ct.crash_type AS crash_type,
    COUNT(DISTINCT c.crash_sk) AS number_of_crashes,
    round(AVG(toInteger(sl.speed_limit)), 0) AS average_speed_limit
ORDER BY state, crash_type;

// Question 9. Find all fatal crashes on weekends (Saturday or Sunday) where the victim was a pedestrian aged 0 to 16.
// For each matching fatality, report the crash ID, remoteness area, road type, LGA name, age of the pedestrian,
// and the road user type. Limit the output to the first 5 results, ordered by remoteness area, road type, LGA name, and crash ID.

MATCH (f:fatality)-[:ROAD_USER_IS]->(ru:road_user)
WHERE ru.road_user = 'Pedestrian' AND toInteger(f.age) <= 16
MATCH (f)-[:IN_CRASH]->(c:crash)-[:IN_LGA]->(lga:lga)-[:IN_NRA]->(nra:nra)
MATCH (c)-[:IN_DATE]->(d:date)
WHERE d.dayweek IN ['Saturday', 'Sunday']
MATCH (c)-[:IN_ROAD_TYPE]->(rt:road_type)
RETURN
    c.crash_id AS crash_id,
    nra.nra AS remoteness_area,
    rt.road_type AS road_type,
    lga.lga AS lga_name,
    f.age AS age,
    ru.road_user AS road_user_type
ORDER BY remoteness_area, road_type, lga_name, crash_id
LIMIT 5;